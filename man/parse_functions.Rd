% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/parsers.R
\name{parse_functions}
\alias{parse_functions}
\alias{parse_int}
\alias{parse_dbl}
\alias{parse_str}
\alias{parse_datetime}
\alias{parse_geojson}
\title{Parse HTTP input parameters strings into R data types.}
\usage{
parse_int(x)

parse_dbl(x)

parse_str(x)

parse_datetime(x)

parse_geojson(x, ...)
}
\arguments{
\item{x}{A character vector containing the HTTP input parameter string
to be parsed.}

\item{...}{Additional parameter to pass to \code{jsonlite::fromJSON}.}
}
\value{
A vector containing the parsed elements.
}
\description{
This set of functions convert input strings to a corresponding R data.
Note that these functions may introduce \code{NA} values in case of conversion
failure.
}
\details{
\itemize{

\item \code{parse_int}: Splits an array-like string into a \code{integer} vector.
For example, \code{"1,2,3"} will be parsed into \code{c(1L, 2L, 3L)}.

\item \code{parse_dbl}: Splits an array-like string into a \code{numeric} vector.
For example, \code{"1.5,2,3.5"} will be parsed into \code{c(1.5, 2, 3.5)}.

\item \code{parse_str}: Splits an array-like string into a \code{character} vector.
For example, \code{"apple,banana,orange"} will be parsed into
\code{c("apple", "banana", "orange")}.

\item \code{parse_datetime}: Parse an interval-like string into a \code{datetime}
object. For example, \code{"2020-02-01/2021-06-30"} will be parsed into
\code{list(start="2020-02-01", end="2021-06-30", exact=NULL)}.
This function also checks if the dates are valid according to
RFC3339 timestamp or time interval. If the datetime parameter
is not valid, it raises an error with the appropriate status code.

\item \code{parse_geojson}: Splits an JSON-like string into a corresponding
\code{list} vector.
}
}
\seealso{
For more detail on \code{jsonlite::fromJSON}'s parameters: \code{\link[jsonlite:fromJSON]{jsonlite::fromJSON()}}
}
